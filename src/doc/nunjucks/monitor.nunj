{% extends "_template.nunj" %}

{% set title = 'Monitor' %}

{% block content %}
    <p>Aerodial has a feature for monitoring a property change. Use <code>monitor()</code> to monitor it.</p>

    <div class="codeBlock">
        <div class="codeBlock_section">
		<pre><code class="js">var aero = Aerodial();
aero.monitor(target, 'time');    // String
aero.monitor(target, 'active');  // Boolean
aero.monitor(target, 'color');   // Color
aero.monitor(target, 'wave');    // Number
</code></pre>
        </div>
        <div class="codeBlock_section codeBlock_section-example">
            <div id="textExample" class="codeBlock_paneContainer"></div>
        </div>
    </div>


    <h2>Graph</h2>
    <p>Aerodial can draw a graph for a number property. Pass <code>graph</code> option as follows:</p>

    <div class="codeBlock">
        <div class="codeBlock_section">
		<pre><code class="js">var aero = Aerodial();
aero.monitor(target, 'wave', {
  graph: true,
  min: -5.0,
  max: +5.0,
  count: 200
});</code></pre>
        </div>
        <div class="codeBlock_section codeBlock_section-example">
            <div id="graphExample" class="codeBlock_aeroContainer"></div>
        </div>
    </div>

    <p><code>min</code> is a minimum value of the graph, <code>max</code> is a maximum value, and <code>count</code> is
        data count to plot.</p>


    <h2>Log</h2>
    <p>You can specify <code>count</code> option for a single-line string property. Aerodial holds a specified count of
        data.</p>

    <div class="codeBlock">
        <div class="codeBlock_section">
		<pre><code class="js">var aero = Aerodial();
aero.monitor(target, 'time', {
  count: 10
});</code></pre>
        </div>
        <div class="codeBlock_section codeBlock_section-example">
            <div id="logExample" class="codeBlock_paneContainer"></div>
        </div>
    </div>


    <h2>Multi-line text</h2>
    <p>To monitoring a multi-line string property, enable <code>multiline</code> option.</p>

    <div class="codeBlock">
        <div class="codeBlock_section">
		<pre><code class="js">var aero = Aerodial();
aero.monitor(target, 'message', {
  multiline: true
});</code></pre>
        </div>
        <div class="codeBlock_section codeBlock_section-example">
            <div id="multilineExample" class="codeBlock_paneContainer"></div>
        </div>
    </div>


    <h2>Changing monitoring interval</h2>
    <p>You can change an interval for monitoring by <code>interval</code> option, in the order of milliseconds. The
        default value is 100ms.</p>

    <div class="codeBlock">
        <div class="codeBlock_section">
		<pre><code class="js">var aero = Aerodial();
aero.monitor(target, 'wave', {
  interval: 500,
  label: 'wave (0.5s)'
});
aero.monitor(target, 'wave', {
  interval: 1000,
  label: 'wave (1.0s)'
});</code></pre>
        </div>
        <div class="codeBlock_section codeBlock_section-example">
            <div id="intervalExample" class="codeBlock_paneContainer"></div>
        </div>
    </div>
{% endblock %}

{% block script %}
    var sharedParams = {
    time: '',
    color: '#000000',
    active: false,
    wave: 0
    };
    var waveT = 0;
    setInterval(function() {
    waveT += 0.02;
    sharedParams.wave = 3.0 * 4.0 / Math.PI * (
    Math.sin(waveT * 1 * Math.PI) +
    Math.sin(waveT * 3 * Math.PI) / 3 +
    Math.sin(waveT * 5 * Math.PI) / 5
    );

    var nWave = Math.pow(Math.sin(waveT), 2);
    var hex = (Math.floor(nWave * 255)).toString(16);
    if (hex.length === 1) {
    hex = '0' + hex;
    }
    sharedParams.color = '#00' + hex + '00';
    sharedParams.active = (nWave >= 0.5);
    }, 50);
    setInterval(function() {
    sharedParams.time = String(new Date()).match(/\d{2}:\d{2}:\d{2}/)[0];
    }, 1000);

    (function() {
    var aero = Aerodial({
    foldable: false,
    container: document.getElementById('textExample')
    });
    aero.monitor(sharedParams, 'time', {interval: 1000});
    aero.monitor(sharedParams, 'active');
    aero.monitor(sharedParams, 'color');
    aero.monitor(sharedParams, 'wave');
    })();

    (function() {
    var aero = Aerodial({
    foldable: false,
    container: document.getElementById('graphExample')
    });
    aero.monitor(sharedParams, 'wave', {
    graph: true,
    min: -5.0,
    max: +5.0,
    count: 200,
    interval: 30
    });
    })();

    (function() {
    var aero = Aerodial({
    foldable: false,
    container: document.getElementById('logExample')
    });
    aero.monitor(sharedParams, 'time', {
    count: 10
    });
    })();

    (function() {
    var params = {
    json: [
    '{',
    '  "content-length": ' + String(Math.floor(Math.random() * 1e6)),
    '  "content-type": "application/json"',
    '  "date": "' + String(new Date()) + '"',
    '}',
    ].join('\n')
    };

    var aero = Aerodial({
    foldable: false,
    container: document.getElementById('multilineExample')
    });
    aero.monitor(params, 'json', {
    interval: 1e6,
    multiline: true
    });
    })();

    (function() {
    var aero = Aerodial({
    container: document.getElementById('intervalExample'),
    foldable: false
    });
    aero.monitor(sharedParams, 'wave', {
    interval: 500,
    label: 'wave (0.5s)'
    });
    aero.monitor(sharedParams, 'wave', {
    interval: 1000,
    label: 'wave (1.0s)'
    });
    })();
{% endblock %}